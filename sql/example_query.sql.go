// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: example_query.sql

package db

import (
	"context"
	"database/sql"
)

const getMessage = `-- name: GetMessage :one
SELECT id, message FROM examples WHERE id = ?
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Example, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Example
	err := row.Scan(&i.ID, &i.Message)
	return i, err
}

const insertMessage = `-- name: InsertMessage :execresult
INSERT INTO examples (message) VALUES( ?)
`

func (q *Queries) InsertMessage(ctx context.Context, message string) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertMessage, message)
}

const listMessages = `-- name: ListMessages :many
SELECT id, message FROM examples
`

func (q *Queries) ListMessages(ctx context.Context) ([]Example, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Example
	for rows.Next() {
		var i Example
		if err := rows.Scan(&i.ID, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
